-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.achievement_definition (
  achievement_def_id integer NOT NULL DEFAULT nextval('achievement_definition_achievement_def_id_seq'::regclass),
  name character varying NOT NULL,
  description text NOT NULL,
  category character varying,
  icon_url text,
  badge_color character varying,
  criteria jsonb NOT NULL,
  points_reward integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT achievement_definition_pkey PRIMARY KEY (achievement_def_id)
);
CREATE TABLE public.admin_activity_log (
  log_id integer NOT NULL DEFAULT nextval('admin_activity_log_log_id_seq'::regclass),
  admin_id integer NOT NULL,
  action character varying NOT NULL,
  target_table character varying,
  target_id integer,
  old_values jsonb,
  new_values jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT admin_activity_log_pkey PRIMARY KEY (log_id),
  CONSTRAINT admin_log_admin_fkey FOREIGN KEY (admin_id) REFERENCES public.useraccount(user_id)
);
CREATE TABLE public.assignment_submission (
  submission_id integer NOT NULL DEFAULT nextval('assignment_submission_submission_id_seq'::regclass),
  user_id integer NOT NULL,
  lesson_id integer NOT NULL,
  enrollment_id integer NOT NULL,
  submission_text text,
  submitted_files jsonb,
  status character varying DEFAULT 'submitted'::character varying CHECK (status::text = ANY (ARRAY['submitted'::character varying, 'graded'::character varying, 'returned'::character varying]::text[])),
  score integer,
  max_score integer,
  feedback text,
  graded_by integer,
  submitted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  graded_at timestamp with time zone,
  CONSTRAINT assignment_submission_pkey PRIMARY KEY (submission_id),
  CONSTRAINT assignment_enrollment_fkey FOREIGN KEY (enrollment_id) REFERENCES public.enrollment(enrollment_id),
  CONSTRAINT assignment_graded_by_fkey FOREIGN KEY (graded_by) REFERENCES public.educator(user_id),
  CONSTRAINT assignment_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT assignment_lesson_fkey FOREIGN KEY (lesson_id) REFERENCES public.lesson(lesson_id)
);
CREATE TABLE public.course (
  course_id integer NOT NULL DEFAULT nextval('course_course_id_seq'::regclass),
  educator_id integer NOT NULL,
  institution_id integer,
  category_id integer,
  title character varying NOT NULL,
  slug character varying NOT NULL UNIQUE,
  short_description text,
  description text,
  thumbnail_image_url text,
  promo_video_url text,
  price numeric DEFAULT 0.00 CHECK (price >= 0::numeric),
  discounted_price numeric,
  currency character varying DEFAULT 'USD'::character varying,
  difficulty_level character varying CHECK (difficulty_level::text = ANY (ARRAY['beginner'::character varying, 'intermediate'::character varying, 'advanced'::character varying, 'expert'::character varying]::text[])),
  estimated_duration_hours integer,
  language character varying DEFAULT 'en'::character varying,
  requirements text,
  what_you_will_learn text,
  target_audience text,
  is_published boolean DEFAULT false,
  is_active boolean DEFAULT true,
  is_featured boolean DEFAULT false,
  enrollment_count integer DEFAULT 0,
  average_rating numeric DEFAULT 0.00 CHECK (average_rating >= 0::numeric AND average_rating <= 5.00),
  total_reviews integer DEFAULT 0,
  last_updated timestamp with time zone,
  published_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT course_pkey PRIMARY KEY (course_id),
  CONSTRAINT course_educator_fkey FOREIGN KEY (educator_id) REFERENCES public.educator(user_id),
  CONSTRAINT course_institution_fkey FOREIGN KEY (institution_id) REFERENCES public.institution(institution_id),
  CONSTRAINT course_category_fkey FOREIGN KEY (category_id) REFERENCES public.course_category(category_id)
);
CREATE TABLE public.course_category (
  category_id integer NOT NULL DEFAULT nextval('course_category_category_id_seq'::regclass),
  name character varying NOT NULL,
  slug character varying NOT NULL UNIQUE,
  description text,
  icon_url text,
  color character varying,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT course_category_pkey PRIMARY KEY (category_id)
);
CREATE TABLE public.course_discussion (
  discussion_id integer NOT NULL DEFAULT nextval('course_discussion_discussion_id_seq'::regclass),
  course_id integer NOT NULL,
  lesson_id integer,
  user_id integer NOT NULL,
  title character varying NOT NULL,
  content text NOT NULL,
  is_pinned boolean DEFAULT false,
  is_locked boolean DEFAULT false,
  reply_count integer DEFAULT 0,
  last_reply_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT course_discussion_pkey PRIMARY KEY (discussion_id),
  CONSTRAINT discussion_course_fkey FOREIGN KEY (course_id) REFERENCES public.course(course_id),
  CONSTRAINT discussion_lesson_fkey FOREIGN KEY (lesson_id) REFERENCES public.lesson(lesson_id),
  CONSTRAINT discussion_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id)
);
CREATE TABLE public.course_order (
  order_id integer NOT NULL DEFAULT nextval('course_order_order_id_seq'::regclass),
  order_number character varying NOT NULL UNIQUE,
  user_id integer NOT NULL,
  subtotal numeric NOT NULL CHECK (subtotal >= 0::numeric),
  tax_amount numeric DEFAULT 0.00 CHECK (tax_amount >= 0::numeric),
  discount_amount numeric DEFAULT 0.00 CHECK (discount_amount >= 0::numeric),
  total_amount numeric NOT NULL CHECK (total_amount >= 0::numeric),
  currency character varying DEFAULT 'USD'::character varying,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'cancelled'::character varying, 'refunded'::character varying]::text[])),
  payment_method character varying,
  billing_address jsonb,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT course_order_pkey PRIMARY KEY (order_id),
  CONSTRAINT order_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id)
);
CREATE TABLE public.course_review (
  review_id integer NOT NULL DEFAULT nextval('course_review_review_id_seq'::regclass),
  course_id integer NOT NULL,
  learner_id integer NOT NULL,
  enrollment_id integer NOT NULL,
  rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
  title character varying,
  comment text,
  is_featured boolean DEFAULT false,
  is_verified_purchase boolean DEFAULT true,
  helpful_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT course_review_pkey PRIMARY KEY (review_id),
  CONSTRAINT review_course_fkey FOREIGN KEY (course_id) REFERENCES public.course(course_id),
  CONSTRAINT review_learner_fkey FOREIGN KEY (learner_id) REFERENCES public.learner(user_id),
  CONSTRAINT review_enrollment_fkey FOREIGN KEY (enrollment_id) REFERENCES public.enrollment(enrollment_id)
);
CREATE TABLE public.course_tag_relations (
  course_id integer NOT NULL,
  tag_id integer NOT NULL,
  CONSTRAINT course_tag_relations_pkey PRIMARY KEY (course_id, tag_id),
  CONSTRAINT course_tag_course_fkey FOREIGN KEY (course_id) REFERENCES public.course(course_id),
  CONSTRAINT course_tag_tag_fkey FOREIGN KEY (tag_id) REFERENCES public.course_tags(tag_id)
);
CREATE TABLE public.course_tags (
  tag_id integer NOT NULL DEFAULT nextval('course_tags_tag_id_seq'::regclass),
  name character varying NOT NULL UNIQUE,
  usage_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT course_tags_pkey PRIMARY KEY (tag_id)
);
CREATE TABLE public.coursemoderation (
  moderation_id integer NOT NULL DEFAULT nextval('coursemoderation_moderation_id_seq'::regclass),
  course_id integer NOT NULL,
  admin_id integer NOT NULL,
  status character varying NOT NULL CHECK (status::text = ANY (ARRAY['approved'::character varying, 'rejected'::character varying, 'flagged'::character varying, 'under_review'::character varying, 'requires_changes'::character varying]::text[])),
  comments text,
  changes_required jsonb,
  reviewed_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT coursemoderation_pkey PRIMARY KEY (moderation_id),
  CONSTRAINT coursemoderation_course_fkey FOREIGN KEY (course_id) REFERENCES public.course(course_id),
  CONSTRAINT coursemoderation_admin_fkey FOREIGN KEY (admin_id) REFERENCES public.superadmin(user_id)
);
CREATE TABLE public.coursemodule (
  module_id integer NOT NULL DEFAULT nextval('coursemodule_module_id_seq'::regclass),
  course_id integer NOT NULL,
  title character varying NOT NULL,
  description text,
  order_index integer NOT NULL,
  estimated_duration_hours numeric,
  is_active boolean DEFAULT true,
  is_preview boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT coursemodule_pkey PRIMARY KEY (module_id),
  CONSTRAINT coursemodule_course_fkey FOREIGN KEY (course_id) REFERENCES public.course(course_id)
);
CREATE TABLE public.discussion_reply (
  reply_id integer NOT NULL DEFAULT nextval('discussion_reply_reply_id_seq'::regclass),
  discussion_id integer NOT NULL,
  user_id integer NOT NULL,
  content text NOT NULL,
  is_solution boolean DEFAULT false,
  upvotes integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT discussion_reply_pkey PRIMARY KEY (reply_id),
  CONSTRAINT reply_discussion_fkey FOREIGN KEY (discussion_id) REFERENCES public.course_discussion(discussion_id),
  CONSTRAINT reply_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id)
);
CREATE TABLE public.educator (
  user_id integer NOT NULL,
  institution_id integer,
  employee_id character varying,
  title character varying,
  bio text,
  specialization text,
  qualifications text,
  years_experience integer CHECK (years_experience >= 0),
  teaching_rating numeric DEFAULT 0.00 CHECK (teaching_rating >= 0::numeric AND teaching_rating <= 5.00),
  total_students integer DEFAULT 0,
  total_courses integer DEFAULT 0,
  verification_status character varying DEFAULT 'pending'::character varying CHECK (verification_status::text = ANY (ARRAY['pending'::character varying, 'approved'::character varying, 'rejected'::character varying, 'suspended'::character varying]::text[])),
  verification_documents jsonb,
  verified_by integer,
  verified_at timestamp with time zone,
  total_earnings numeric DEFAULT 0.00,
  payout_method character varying DEFAULT 'bank_transfer'::character varying,
  payout_details jsonb,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT educator_pkey PRIMARY KEY (user_id),
  CONSTRAINT educator_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT educator_institution_fkey FOREIGN KEY (institution_id) REFERENCES public.institution(institution_id),
  CONSTRAINT educator_verified_by_fkey FOREIGN KEY (verified_by) REFERENCES public.superadmin(user_id)
);
CREATE TABLE public.enrollment (
  enrollment_id integer NOT NULL DEFAULT nextval('enrollment_enrollment_id_seq'::regclass),
  learner_id integer NOT NULL,
  course_id integer NOT NULL,
  enrolled_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  status character varying DEFAULT 'active'::character varying CHECK (status::text = ANY (ARRAY['active'::character varying, 'completed'::character varying, 'dropped'::character varying, 'suspended'::character varying, 'refunded'::character varying]::text[])),
  completion_percentage integer DEFAULT 0 CHECK (completion_percentage >= 0 AND completion_percentage <= 100),
  last_accessed timestamp with time zone,
  completed_at timestamp with time zone,
  certificate_issued boolean DEFAULT false,
  certificate_url text,
  total_time_spent_minutes integer DEFAULT 0,
  current_lesson_id integer,
  CONSTRAINT enrollment_pkey PRIMARY KEY (enrollment_id),
  CONSTRAINT enrollment_learner_fkey FOREIGN KEY (learner_id) REFERENCES public.learner(user_id),
  CONSTRAINT enrollment_course_fkey FOREIGN KEY (course_id) REFERENCES public.course(course_id),
  CONSTRAINT enrollment_current_lesson_fkey FOREIGN KEY (current_lesson_id) REFERENCES public.lesson(lesson_id)
);
CREATE TABLE public.file_storage (
  file_id integer NOT NULL DEFAULT nextval('file_storage_file_id_seq'::regclass),
  original_filename character varying NOT NULL,
  stored_filename character varying NOT NULL UNIQUE,
  file_path text NOT NULL,
  file_size bigint NOT NULL,
  mime_type character varying NOT NULL,
  file_type character varying NOT NULL,
  uploaded_by integer NOT NULL,
  is_public boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT file_storage_pkey PRIMARY KEY (file_id),
  CONSTRAINT file_storage_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES public.useraccount(user_id)
);
CREATE TABLE public.game_attempt (
  attempt_id integer NOT NULL DEFAULT nextval('game_attempt_attempt_id_seq'::regclass),
  user_id integer NOT NULL,
  game_id integer NOT NULL,
  score integer NOT NULL CHECK (score >= 0),
  max_score integer,
  level_reached integer DEFAULT 1,
  time_taken_seconds integer,
  game_data jsonb,
  points_earned integer DEFAULT 0,
  played_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT game_attempt_pkey PRIMARY KEY (attempt_id),
  CONSTRAINT game_attempt_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT game_attempt_game_fkey FOREIGN KEY (game_id) REFERENCES public.minigame(game_id)
);
CREATE TABLE public.institution (
  institution_id integer NOT NULL DEFAULT nextval('institution_institution_id_seq'::regclass),
  name character varying NOT NULL,
  slug character varying NOT NULL UNIQUE,
  email character varying NOT NULL UNIQUE,
  contact_number character varying,
  address text,
  city character varying,
  state character varying,
  country character varying,
  postal_code character varying,
  website character varying,
  logo_url text,
  banner_image_url text,
  description text,
  accreditation_info text,
  is_active boolean DEFAULT true,
  is_verified boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT institution_pkey PRIMARY KEY (institution_id)
);
CREATE TABLE public.institutionadmin (
  user_id integer NOT NULL,
  institution_id integer NOT NULL,
  contact_email character varying,
  department character varying,
  role_title character varying,
  permissions jsonb,
  verification_status character varying DEFAULT 'pending'::character varying CHECK (verification_status::text = ANY (ARRAY['pending'::character varying, 'approved'::character varying, 'rejected'::character varying, 'suspended'::character varying]::text[])),
  verified_by integer,
  verified_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT institutionadmin_pkey PRIMARY KEY (user_id),
  CONSTRAINT institutionadmin_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT institutionadmin_institution_fkey FOREIGN KEY (institution_id) REFERENCES public.institution(institution_id),
  CONSTRAINT institutionadmin_verified_by_fkey FOREIGN KEY (verified_by) REFERENCES public.superadmin(user_id)
);
CREATE TABLE public.learner (
  user_id integer NOT NULL,
  student_id character varying UNIQUE,
  last_session timestamp with time zone,
  total_progress_percentage integer DEFAULT 0 CHECK (total_progress_percentage >= 0 AND total_progress_percentage <= 100),
  status character varying DEFAULT 'active'::character varying CHECK (status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'suspended'::character varying, 'graduated'::character varying]::text[])),
  learning_streak integer DEFAULT 0,
  longest_streak integer DEFAULT 0,
  total_points integer DEFAULT 0,
  level integer DEFAULT 1,
  badges_earned integer DEFAULT 0,
  certificates_earned integer DEFAULT 0,
  total_study_hours numeric DEFAULT 0,
  preferred_learning_style character varying,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT learner_pkey PRIMARY KEY (user_id),
  CONSTRAINT learner_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id)
);
CREATE TABLE public.learning_activity (
  activity_id integer NOT NULL DEFAULT nextval('learning_activity_activity_id_seq'::regclass),
  user_id integer NOT NULL,
  lesson_id integer NOT NULL,
  enrollment_id integer NOT NULL,
  status character varying NOT NULL CHECK (status::text = ANY (ARRAY['started'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'skipped'::character varying]::text[])),
  progress_percentage integer DEFAULT 0 CHECK (progress_percentage >= 0 AND progress_percentage <= 100),
  time_spent_seconds integer DEFAULT 0,
  video_watch_time_seconds integer DEFAULT 0,
  last_position_seconds integer DEFAULT 0,
  first_accessed timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  last_accessed timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  completed_at timestamp with time zone,
  CONSTRAINT learning_activity_pkey PRIMARY KEY (activity_id),
  CONSTRAINT activity_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT activity_lesson_fkey FOREIGN KEY (lesson_id) REFERENCES public.lesson(lesson_id),
  CONSTRAINT activity_enrollment_fkey FOREIGN KEY (enrollment_id) REFERENCES public.enrollment(enrollment_id)
);
CREATE TABLE public.lesson (
  lesson_id integer NOT NULL DEFAULT nextval('lesson_lesson_id_seq'::regclass),
  module_id integer NOT NULL,
  title character varying NOT NULL,
  description text,
  content text,
  video_url text,
  video_duration_seconds integer,
  lesson_type character varying NOT NULL CHECK (lesson_type::text = ANY (ARRAY['video'::character varying, 'quiz'::character varying, 'assignment'::character varying, 'reading'::character varying, 'interactive'::character varying, 'live_session'::character varying]::text[])),
  order_index integer NOT NULL,
  estimated_duration_minutes integer,
  is_active boolean DEFAULT true,
  is_preview boolean DEFAULT false,
  requires_completion boolean DEFAULT true,
  passing_score integer,
  max_attempts integer DEFAULT 3,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT lesson_pkey PRIMARY KEY (lesson_id),
  CONSTRAINT lesson_module_fkey FOREIGN KEY (module_id) REFERENCES public.coursemodule(module_id)
);
CREATE TABLE public.lessonmaterial (
  material_id integer NOT NULL DEFAULT nextval('lessonmaterial_material_id_seq'::regclass),
  lesson_id integer NOT NULL,
  file_id integer NOT NULL,
  title character varying,
  description text,
  is_downloadable boolean DEFAULT true,
  order_index integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT lessonmaterial_pkey PRIMARY KEY (material_id),
  CONSTRAINT lessonmaterial_lesson_fkey FOREIGN KEY (lesson_id) REFERENCES public.lesson(lesson_id),
  CONSTRAINT lessonmaterial_file_fkey FOREIGN KEY (file_id) REFERENCES public.file_storage(file_id)
);
CREATE TABLE public.minigame (
  game_id integer NOT NULL DEFAULT nextval('minigame_game_id_seq'::regclass),
  name character varying NOT NULL,
  description text,
  category character varying,
  difficulty_level character varying CHECK (difficulty_level::text = ANY (ARRAY['easy'::character varying, 'medium'::character varying, 'hard'::character varying, 'expert'::character varying]::text[])),
  instructions text,
  thumbnail_url text,
  game_config jsonb,
  points_reward integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT minigame_pkey PRIMARY KEY (game_id)
);
CREATE TABLE public.notification (
  notification_id integer NOT NULL DEFAULT nextval('notification_notification_id_seq'::regclass),
  user_id integer NOT NULL,
  template_id integer,
  title character varying NOT NULL,
  message text NOT NULL,
  type character varying DEFAULT 'general'::character varying,
  action_url character varying,
  action_data jsonb,
  is_read boolean DEFAULT false,
  read_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT notification_pkey PRIMARY KEY (notification_id),
  CONSTRAINT notification_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT notification_template_fkey FOREIGN KEY (template_id) REFERENCES public.notification_template(template_id)
);
CREATE TABLE public.notification_template (
  template_id integer NOT NULL DEFAULT nextval('notification_template_template_id_seq'::regclass),
  name character varying NOT NULL UNIQUE,
  subject character varying NOT NULL,
  body_template text NOT NULL,
  type character varying NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT notification_template_pkey PRIMARY KEY (template_id)
);
CREATE TABLE public.order_item (
  item_id integer NOT NULL DEFAULT nextval('order_item_item_id_seq'::regclass),
  order_id integer NOT NULL,
  course_id integer NOT NULL,
  price numeric NOT NULL CHECK (price >= 0::numeric),
  discount_amount numeric DEFAULT 0.00,
  final_price numeric NOT NULL CHECK (final_price >= 0::numeric),
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT order_item_pkey PRIMARY KEY (item_id),
  CONSTRAINT order_item_order_fkey FOREIGN KEY (order_id) REFERENCES public.course_order(order_id),
  CONSTRAINT order_item_course_fkey FOREIGN KEY (course_id) REFERENCES public.course(course_id)
);
CREATE TABLE public.payment_transaction (
  transaction_id integer NOT NULL DEFAULT nextval('payment_transaction_transaction_id_seq'::regclass),
  transaction_reference uuid DEFAULT uuid_generate_v4() UNIQUE,
  order_id integer NOT NULL,
  payment_gateway character varying NOT NULL,
  gateway_transaction_id character varying,
  payment_method character varying NOT NULL,
  amount numeric NOT NULL CHECK (amount > 0::numeric),
  currency character varying DEFAULT 'USD'::character varying,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying, 'refunded'::character varying, 'partially_refunded'::character varying]::text[])),
  gateway_response jsonb,
  failure_reason text,
  refunded_amount numeric DEFAULT 0.00,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  completed_at timestamp with time zone,
  CONSTRAINT payment_transaction_pkey PRIMARY KEY (transaction_id),
  CONSTRAINT transaction_order_fkey FOREIGN KEY (order_id) REFERENCES public.course_order(order_id)
);
CREATE TABLE public.quiz_attempt (
  attempt_id integer NOT NULL DEFAULT nextval('quiz_attempt_attempt_id_seq'::regclass),
  user_id integer NOT NULL,
  lesson_id integer NOT NULL,
  enrollment_id integer NOT NULL,
  answers jsonb NOT NULL,
  score integer NOT NULL CHECK (score >= 0),
  max_score integer NOT NULL CHECK (max_score > 0),
  percentage numeric DEFAULT round((((score)::numeric / (max_score)::numeric) * (100)::numeric), 2),
  time_taken_seconds integer,
  is_passed boolean,
  attempt_number integer DEFAULT 1,
  started_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  completed_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT quiz_attempt_pkey PRIMARY KEY (attempt_id),
  CONSTRAINT quiz_attempt_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT quiz_attempt_lesson_fkey FOREIGN KEY (lesson_id) REFERENCES public.lesson(lesson_id),
  CONSTRAINT quiz_attempt_enrollment_fkey FOREIGN KEY (enrollment_id) REFERENCES public.enrollment(enrollment_id)
);
CREATE TABLE public.quiz_question (
  question_id integer NOT NULL DEFAULT nextval('quiz_question_question_id_seq'::regclass),
  lesson_id integer NOT NULL,
  question_text text NOT NULL,
  question_type character varying NOT NULL CHECK (question_type::text = ANY (ARRAY['multiple_choice'::character varying, 'true_false'::character varying, 'short_answer'::character varying, 'essay'::character varying, 'fill_blank'::character varying]::text[])),
  options jsonb,
  correct_answer text,
  explanation text,
  points integer DEFAULT 1,
  order_index integer,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT quiz_question_pkey PRIMARY KEY (question_id),
  CONSTRAINT quiz_question_lesson_fkey FOREIGN KEY (lesson_id) REFERENCES public.lesson(lesson_id)
);
CREATE TABLE public.review_helpfulness (
  user_id integer NOT NULL,
  review_id integer NOT NULL,
  is_helpful boolean NOT NULL,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT review_helpfulness_pkey PRIMARY KEY (user_id, review_id),
  CONSTRAINT review_help_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT review_help_review_fkey FOREIGN KEY (review_id) REFERENCES public.course_review(review_id)
);
CREATE TABLE public.superadmin (
  user_id integer NOT NULL,
  access_level character varying DEFAULT 'full'::character varying,
  permissions jsonb,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT superadmin_pkey PRIMARY KEY (user_id),
  CONSTRAINT superadmin_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id)
);
CREATE TABLE public.user_achievement (
  achievement_id integer NOT NULL DEFAULT nextval('user_achievement_achievement_id_seq'::regclass),
  user_id integer NOT NULL,
  achievement_def_id integer NOT NULL,
  progress_data jsonb,
  is_completed boolean DEFAULT false,
  points_earned integer DEFAULT 0,
  earned_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT user_achievement_pkey PRIMARY KEY (achievement_id),
  CONSTRAINT achievement_user_fkey FOREIGN KEY (user_id) REFERENCES public.useraccount(user_id),
  CONSTRAINT achievement_def_fkey FOREIGN KEY (achievement_def_id) REFERENCES public.achievement_definition(achievement_def_id)
);
CREATE TABLE public.useraccount (
  user_id integer NOT NULL DEFAULT nextval('useraccount_user_id_seq'::regclass),
  email character varying NOT NULL UNIQUE,
  password character varying NOT NULL,
  first_name character varying NOT NULL,
  last_name character varying NOT NULL,
  phone character varying,
  date_of_birth date,
  gender character varying CHECK (gender::text = ANY (ARRAY['male'::character varying, 'female'::character varying, 'other'::character varying, 'prefer_not_to_say'::character varying]::text[])),
  profile_picture_url text,
  cover_photo_url text,
  bio text,
  location character varying,
  timezone character varying DEFAULT 'UTC'::character varying,
  language_preference character varying DEFAULT 'en'::character varying,
  is_active boolean DEFAULT true,
  is_verified boolean DEFAULT false,
  email_verified boolean DEFAULT false,
  phone_verified boolean DEFAULT false,
  last_login timestamp with time zone,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT useraccount_pkey PRIMARY KEY (user_id)
);